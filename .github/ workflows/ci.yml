name: CI


# Controls when the workflow will run. This will trigger the workflow on push events and when someone opens a pull request.
on:
  push :
  pull_request :
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Setup the environment variables.
    env:
      PGPORT: 5432
    
    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        env:
          POSTGRES_DB: pmr
          POSTGRES_PASSWORD: admin
          POSTGRES_PORT: 5432
          POSTGRES_USER: admin
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: "3.6"
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Install PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install --yes --no-install-recommends postgresql-client
      - name: Setup PostgreSQL
        run: |
          psql -h localhost -d pmr -U admin -c "ALTER ROLE admin SET client_encoding TO 'utf8'"
          psql -h localhost -d pmr -U admin -c "ALTER ROLE admin SET default_transaction_isolation TO 'read committed'"
          psql -h localhost -d pmr -U admin -c "ALTER ROLE admin SET timezone TO 'UTC'"
          psql -h localhost -d pmr -U admin -c "ALTER USER admin CREATEDB"
          psql -h localhost -d pmr -U admin -c "ALTER DATABASE pmr OWNER TO admin"
        env:
          PGPASSWORD: admin
      - name: Download Test Data
        run: |
          mkdir tests/testdata
          cd tests/testdata
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/x3qpga9gc4ifamn/t1.png
          wget https://www.dropbox.com/s/l5t09lp8u4ok593/t2.jpeg
          wget https://www.dropbox.com/s/hzlpo74tk0xwzzh/t3.jpeg
          wget https://www.dropbox.com/s/lni50cgunua5mij/test1.mp4
          wget https://www.dropbox.com/s/wm3llx0ydbnq8mn/test2.mp4
          wget https://www.dropbox.com/s/ato4fie6k3lmctu/test3.mp4
          wget https://www.dropbox.com/s/ifd7254x29oxjze/test4.mp4
          wget https://www.dropbox.com/s/iwtgwz24eipd629/obj1.mp4
          wget https://www.dropbox.com/s/ull2tqlou1p8l16/obj2.mp4
          wget https://www.dropbox.com/s/3w5ghr5jj6opr58/scene1.mp4
          wget https://www.dropbox.com/s/ij5hj4hznczvfcw/text.mp4
          cd ../..
          export DJANGO_SETTINGS_MODULE="Rekognition.settings"
      - name: Run Code Coverage Test
        run: |
          coverage run -m tests.test_views
          coverage run -m tests.test_views
#         coveralls
#       - name: Lint with flake8
#         run: |
#           flake8 .