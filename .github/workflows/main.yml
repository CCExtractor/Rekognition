
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ dev,main ]

jobs:
  build-job:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        version: [3.6, 3.7, 3.8]
    runs-on: ${{ matrix.os }}

    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: postgres_db
          # required
          POSTGRES_PASSWORD: postgres
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgres_db
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      #Installing PostgressSQL client
        
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
          echo postgree installed 
      # Setting Up Postgres Database

      - name: Setup Database database
        run: |
          echo creating database
          psql -h localhost -U postgres_db -c "CREATE DATABASE pmr"
          echo database created
          psql -h localhost -U postgres_db -c "CREATE USER admin WITH PASSWORD 'admin'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET client_encoding TO 'utf8'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET default_transaction_isolation TO 'read committed'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET timezone TO 'UTC'"
          psql -h localhost -U postgres_db -c "ALTER USER admin CREATEDB"
          psql -h localhost -U postgres_db -c "ALTER DATABASE pmr OWNER TO admin"
          echo postgres sttted up
      
        env:
          # Setting up POSRGRES Enviorment
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres_db
          POSTGRES_PASSWORD: postgres
      
          POSTGRES_PORT: 5432
          PGPASSWORD: postgres

      
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3.1.2
        with:
          python-version: 3.6

      - uses: actions/cache@v3.0.2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}

      # Dependency Installation 

      - name: Install Dependencies
        run: |
          echo python version = 
          python --version
          sudo apt-get install python3-dev
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
          echo installed dependencies
      # Downloading Test Files

      - name: Download Files
        env:
          DJANGO_SETTINGS_MODULE: Rekognition.settings
        run: |
          mkdir tests/testdata
          cd tests/testdata
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/x3qpga9gc4ifamn/t1.png
          wget https://www.dropbox.com/s/l5t09lp8u4ok593/t2.jpeg
          wget https://www.dropbox.com/s/hzlpo74tk0xwzzh/t3.jpeg
          wget https://www.dropbox.com/s/lni50cgunua5mij/test1.mp4
          wget https://www.dropbox.com/s/wm3llx0ydbnq8mn/test2.mp4
          wget https://www.dropbox.com/s/ato4fie6k3lmctu/test3.mp4
          wget https://www.dropbox.com/s/ifd7254x29oxjze/test4.mp4
          wget https://www.dropbox.com/s/iwtgwz24eipd629/obj1.mp4
          wget https://www.dropbox.com/s/ull2tqlou1p8l16/obj2.mp4
          wget https://www.dropbox.com/s/3w5ghr5jj6opr58/scene1.mp4
          wget https://www.dropbox.com/s/ij5hj4hznczvfcw/text.mp4
          cd ../..
          export DJANGO_SETTINGS_MODULE="Rekognition.settings"
      # Running Tests

      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: Rekognition.settings

        run: |
          coverage run -m tests.test_views
          echo test.test_views report 
          coverage report -m
          coverage run -m tests.test_models
          echo test.test_models report
          coverage report -m
          echo Test Run Sucessful
