name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ,dev]
  pull_request:
    branches: [ dev,main ]
jobs:
  docker-job:
    strategy:
      matrix:
        os: [ubuntu-20.04]
        version: [3.6]
    runs-on: ${{ matrix.os }}

    # service containers to run with `postgres-job`
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: postgres_db
          # required
          POSTGRES_PASSWORD: postgres
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: postgres_db
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:


      #Installing PostgressSQL client
        
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
          echo postgree installed 
      # Setting Up Postgres Database

      - name: Setup Database database
        run: |
          echo creating database
          psql -h localhost -U postgres_db -c "CREATE DATABASE pmr"
          echo database created
          psql -h localhost -U postgres_db -c "CREATE USER admin WITH PASSWORD 'admin'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET client_encoding TO 'utf8'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET default_transaction_isolation TO 'read committed'"
          psql -h localhost -U postgres_db -c "ALTER ROLE admin SET timezone TO 'UTC'"
          psql -h localhost -U postgres_db -c "ALTER USER admin CREATEDB"
          psql -h localhost -U postgres_db -c "ALTER DATABASE pmr OWNER TO admin"
          echo "deb [arch=amd64] http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" | sudo tee /etc/apt/sources.list.d/tensorflow-serving.list && \
          curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | sudo apt-key add -
          sudo apt-get update 
          sudo apt-get install tensorflow-model-server
          echo postgres sttted up
          
        env:
          # Setting up POSRGRES Enviorment
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres_db
          POSTGRES_PASSWORD: postgres
      
          POSTGRES_PORT: 5432
          PGPASSWORD: postgres

      
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3.1.2
        with:
          python-version: 3.6

      # Dependency Installation 

      - name: Install Dependencies
        run: |
          echo python version = 
          python --version
          sudo apt-get install python3-dev
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install tensorflow-serving-api==2.5.2
          pip3 install pytest
          echo installed dependencies
          flake8 --ignore=E501,F821,E265,E741 .
      # Downloading Test Files

      - name: Download Files
        run: |
          mkdir tests/testdata
          cd tests/testdata
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/1bnxg32zvgjv0pl/compareImage.jpeg
          wget https://www.dropbox.com/s/x3qpga9gc4ifamn/t1.png
          wget https://www.dropbox.com/s/l5t09lp8u4ok593/t2.jpeg
          wget https://www.dropbox.com/s/hzlpo74tk0xwzzh/t3.jpeg
          wget https://www.dropbox.com/s/lni50cgunua5mij/test1.mp4
          wget https://www.dropbox.com/s/wm3llx0ydbnq8mn/test2.mp4
          wget https://www.dropbox.com/s/ato4fie6k3lmctu/test3.mp4
          wget https://www.dropbox.com/s/ifd7254x29oxjze/test4.mp4
          wget https://www.dropbox.com/s/iwtgwz24eipd629/obj1.mp4
          wget https://www.dropbox.com/s/ull2tqlou1p8l16/obj2.mp4
          wget https://www.dropbox.com/s/3w5ghr5jj6opr58/scene1.mp4
          wget https://www.dropbox.com/s/ij5hj4hznczvfcw/text.mp4
          cd ../..
          cd media 
          mkdir object
          mkdir nsfw
          cd ..
          cd corelib/model
          mkdir facenet
          cd facenet
          wget https://www.dropbox.com/s/jm8grrifh5yk7is/2017.zip?dl=1 -O 2017.zip
          unzip 2017.zip
          rm 2017.zip
          cd ..
          mkdir tfs
          cd tfs
          wget --load-cookies /tmp/cookies.txt "https://drive.google.com/uc?export=download&confirm=$(wget --quiet --save-cookies /tmp/cookies.txt --keep-session-cookies --no-check-certificate 'https://drive.google.com/uc?export=download&id=12yE9v8dWeVidqxseUXidaDoS_VZpVOp1' -O- | sed -rn 's/.*confirm=([0-9A-Za-z_]+).*/\1\n/p')&id=12yE9v8dWeVidqxseUXidaDoS_VZpVOp1" -O module.zip && rm -rf /tmp/cookies.txt
          unzip module.zip
          rm module.zip
          cd ../../..
          cd data
          mkdir text_reco
          cd text_reco
          wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1zmxO5NoEqTdYRGHXalaK7bn2m27egQMN' -O char_dict_en.json
          wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1XGO2ycQcBYtwxT_KanapuoR6LeGR4s_E' -O ord_map_en.json
          cd ../..	
          sudo apt update
          sudo apt install ffmpeg
          export DJANGO_SETTINGS_MODULE="Rekognition.settings"
      - run: |
         export DJANGO_SETTINGS_MODULE="Rekognition.settings"
         set -x
         docker version
         docker run --rm hello-world
         docker pull tensorflow/serving:nightly-devel
         echo $(pwd)
         docker run -d -t -p 8500:8500 -p 8501:8501 -v /home/runner/work/Rekognition/Rekognition/corelib/model/tfs/model_volume:/home/ tensorflow/serving --model_config_file=/home/configs/models.conf
         echo aagye
         python manage.py flush --no-input
         python manage.py migrate
         python manage.py runserver 8000 &
         sleep 10
         python -m pytest --import-mode=append /home/runner/work/Rekognition/Rekognition/tests/ --no-header -vv
         echo done all
